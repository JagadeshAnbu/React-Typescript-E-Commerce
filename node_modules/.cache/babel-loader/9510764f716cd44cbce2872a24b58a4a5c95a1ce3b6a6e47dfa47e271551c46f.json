{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT PROJECTS\\\\Ciseco\\\\Ciseco\\\\src\\\\containers\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Define types for Cart Item and Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst CartContext = /*#__PURE__*/createContext(undefined);\n\n// Create the provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n      if (existingItemIndex !== -1) {\n        // If the item already exists in the cart, update its quantity\n        const updatedCartItems = [...prevItems];\n        updatedCartItems[existingItemIndex] = {\n          ...updatedCartItems[existingItemIndex],\n          quantity: updatedCartItems[existingItemIndex].quantity + product.quantity\n        };\n        return updatedCartItems;\n      } else {\n        // If the item is not in the cart, add it\n        return [...prevItems, {\n          ...product\n        }];\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { CartContext };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","undefined","CartProvider","children","_s","cartItems","setCartItems","addToCart","product","prevItems","existingItemIndex","findIndex","item","id","updatedCartItems","quantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/REACT PROJECTS/Ciseco/Ciseco/src/containers/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\r\n\r\n// Define types for Cart Item and Context\r\nexport interface CartItem {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  image: string;\r\n  quantity: number;\r\n  sizes: string[];\r\n}\r\n\r\ninterface CartContextType {\r\n  cartItems: CartItem[];\r\n  addToCart: (product: CartItem) => void;\r\n}\r\n\r\n// Create the context\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\n// Create the provider component\r\nexport const CartProvider = ({ children }: { children: ReactNode }) => {\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n\r\n  const addToCart = (product: CartItem) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItemIndex = prevItems.findIndex((item) => item.id === product.id);\r\n      if (existingItemIndex !== -1) {\r\n        // If the item already exists in the cart, update its quantity\r\n        const updatedCartItems = [...prevItems];\r\n        updatedCartItems[existingItemIndex] = {\r\n          ...updatedCartItems[existingItemIndex],\r\n          quantity: updatedCartItems[existingItemIndex].quantity + product.quantity,\r\n        };\r\n        return updatedCartItems;\r\n      } else {\r\n        // If the item is not in the cart, add it\r\n        return [...prevItems, { ...product }];\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useCart must be used within a CartProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { CartContext };\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAeA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;;AAEzE;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAa,EAAE,CAAC;EAE1D,MAAMU,SAAS,GAAIC,OAAiB,IAAK;IACvCF,YAAY,CAAEG,SAAS,IAAK;MAC1B,MAAMC,iBAAiB,GAAGD,SAAS,CAACE,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAC/E,IAAIH,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC5B;QACA,MAAMI,gBAAgB,GAAG,CAAC,GAAGL,SAAS,CAAC;QACvCK,gBAAgB,CAACJ,iBAAiB,CAAC,GAAG;UACpC,GAAGI,gBAAgB,CAACJ,iBAAiB,CAAC;UACtCK,QAAQ,EAAED,gBAAgB,CAACJ,iBAAiB,CAAC,CAACK,QAAQ,GAAGP,OAAO,CAACO;QACnE,CAAC;QACD,OAAOD,gBAAgB;MACzB,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGL,SAAS,EAAE;UAAE,GAAGD;QAAQ,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,SAAS;MAAEE;IAAU,CAAE;IAAAJ,QAAA,EACnDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAjB,EAAA,CA5BaF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA6BzB,OAAO,MAAMqB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG7B,UAAU,CAACI,WAAW,CAAC;EACvC,IAAIyB,OAAO,KAAKxB,SAAS,EAAE;IACzB,MAAM,IAAIyB,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,SAASvB,WAAW;AAAG,IAAAsB,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}