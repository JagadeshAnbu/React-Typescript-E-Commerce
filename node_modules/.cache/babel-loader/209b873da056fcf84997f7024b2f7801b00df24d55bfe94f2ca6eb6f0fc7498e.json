{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT PROJECTS\\\\Ciseco\\\\Ciseco\\\\src\\\\containers\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Define types for Cart Item and Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst CartContext = /*#__PURE__*/createContext(undefined);\n\n// Create the provider component\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = product => {\n    setCart(prevCart => [...prevCart, {\n      product: product,\n      quantity: 1\n    } // Add a default quantity value\n    ]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","CartContext","undefined","CartProvider","children","cartItems","setCartItems","addToCart","product","setCart","prevCart","quantity","useCart","context","Error"],"sources":["C:/REACT PROJECTS/Ciseco/Ciseco/src/containers/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\r\n\r\n// Define types for Cart Item and Context\r\ninterface CartItem {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  image: string;\r\n  quantity: number;\r\n}\r\n\r\ninterface CartContextType {\r\n  cart: CartItem[];\r\n  addToCart: (product: Product) => void;\r\n  removeFromCart: (productId: number) => void;\r\n\r\n}\r\n\r\n// Create the context\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\n// Create the provider component\r\nexport const CartProvider = ({ children }: { children: ReactNode }) => {\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n\r\n  const addToCart = (product: Product) => {\r\n    setCart((prevCart) => [\r\n      ...prevCart,\r\n      { product: product, quantity: 1 }, // Add a default quantity value\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useCart must be used within a CartProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAE7E;AAAA;AAgBA;AACA,MAAMC,WAAW,gBAAGH,aAAa,CAA8BI,SAAS,CAAC;;AAEzE;AACA,OAAO,MAAMC,YAAY,GAAG,QAA2C;EAAA;EAAA,IAA1C;IAAEC;EAAkC,CAAC;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAa,EAAE,CAAC;EAE1D,MAAMO,SAAS,GAAIC,OAAgB,IAAK;IACtCC,OAAO,CAAEC,QAAQ,IAAK,CACpB,GAAGA,QAAQ,EACX;MAAEF,OAAO,EAAEA,OAAO;MAAEG,QAAQ,EAAE;IAAE,CAAC,CAAE;IAAA,CACpC,CAAC;EACJ,CAAC;;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEN,SAAS;MAAEE;IAAU,CAAE;IAAA,UACnDH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAE3B,CAAC;;AAED;AAAA,GAjBaD,YAAY;AAAA,KAAZA,YAAY;AAkBzB,OAAO,MAAMS,OAAO,GAAG,MAAM;EAAA;EAC3B,MAAMC,OAAO,GAAGd,UAAU,CAACE,WAAW,CAAC;EACvC,IAAIY,OAAO,KAAKX,SAAS,EAAE;IACzB,MAAM,IAAIY,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAAC,IANWD,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}